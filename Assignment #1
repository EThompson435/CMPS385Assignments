#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <limits>

using namespace std;

struct Point {
    double x, y;
    int cluster;
};

double distance(const Point& p1, const Point& p2) {
    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));
}

double calculateMinDistance(const Point& point, const std::vector<Point>& centroids) {
    double minDist = INFINITY;
    for (const auto& centroid : centroids) {
        double dist = distance(point, centroid);
        minDist = min(minDist, dist);
    }
    return minDist;
}

// K-means++ Initialization
void initializeCentroids(const std::vector<Point>& points, std::vector<Point>& centroids, int k) {
    // Randomly choose the first centroid
    centroids.push_back(points[rand() % points.size()]);

    // Select remaining k-1 centroids based on distance
    for (int i = 1; i < k; ++i) {
        vector<double> distances(points.size(), 0);
        double totalDistance = 0;

        // Calculate the distance of each point from the nearest centroid
        for (int j = 0; j < points.size(); ++j) {
            distances[j] = calculateMinDistance(points[j], centroids);
            totalDistance += distances[j];
        }

        // Choose the next centroid based on probability proportional to the distance
        double r = (rand() / double(RAND_MAX)) * totalDistance;
        double sum = 0;
        for (int j = 0; j < points.size(); ++j) {
            sum += distances[j];
            if (sum >= r) {
                centroids.push_back(points[j]);
                break;
            }
        }
    }
}

void assignCluster(std::vector<Point>& points, const std::vector<Point>& centroids) {
    for (auto& point : points) {
        double minDist = INFINITY;
        for (int i = 0; i < centroids.size(); ++i) {
            double dist = distance(point, centroids[i]);
            if (dist < minDist) {
                minDist = dist;
                point.cluster = i;
            }
        }
    }
}

void updateCentroids(std::vector<Point>& points, std::vector<Point>& centroids, int k) {
    std::vector<int> count(k, 0);
    std::vector<double> sumX(k, 0), sumY(k, 0);

    for (const auto& point : points) {
        int clusterId = point.cluster;
        sumX[clusterId] += point.x;
        sumY[clusterId] += point.y;
        count[clusterId]++;
    }

    for (int i = 0; i < k; ++i) {
        if (count[i] > 0) {
            centroids[i].x = sumX[i] / count[i];
            centroids[i].y = sumY[i] / count[i];
        }
    }
}

bool centroidsChanged(const std::vector<Point>& oldCentroids, const std::vector<Point>& newCentroids) {
    for (size_t i = 0; i < oldCentroids.size(); ++i) {
        if (oldCentroids[i].x != newCentroids[i].x || oldCentroids[i].y != newCentroids[i].y) {
            return true;
        }
    }
    return false;
}

int main() {
    srand(time(0));

    // Input data (points)
    std::vector<Point> points = {
        {1.0, 2.0, -1},
        {1.5, 1.8, -1},
        {5.0, 8.0, -1},
        {8.0, 8.0, -1},
        {1.0, 0.6, -1},
        {9.0, 11.0, -1},
        {8.0, 2.0, -1},
        {10.0, 2.0, -1},
        {9.0, 3.0, -1}
    };

    // Number of clusters
    int k = 3;

    // Initialize centroids using K-means++
    std::vector<Point> centroids;
    initializeCentroids(points, centroids, k);

    std::vector<Point> oldCentroids(k);
    bool changed;

    // K-means clustering loop
    do {
        oldCentroids = centroids;
        assignCluster(points, centroids);
        updateCentroids(points, centroids, k);

        // Check if centroids changed
        changed = centroidsChanged(oldCentroids, centroids);
    } while (changed);

    // Output results
    for (int i = 0; i < k; ++i) {
        cout << "Centroid " << i + 1 << ": (" << centroids[i].x << ", " << centroids[i].y << ")\n";
    }

    for (const auto& point : points) {
        cout << "Point (" << point.x << ", " << point.y << ") is in cluster " << point.cluster + 1 << "\n";
    }

    return 0;
}
